<?php

/**
 * @file
 * Main module file for menu_descriptions.
 *
 * Module to associate longer help / description text with menu items and provide
 * a block per each menu so designated to be used in a main content region.
 *
 * @author shawn.d.sheridan@ClearlyByDesign.com
 */


/**
 * Implements hook_form_alter().
 */
function menu_descriptions_form_alter(&$form, $form_state, $form_id) {

  if ( $form_id == 'menu_edit_menu' ) {
    $form['menu_descriptions_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create a menu descriptions block for this menu'),
      '#description' => t('Menus generally only show the link and use the normal
                            description field as mouse-over help text.  Check this
                            box if you want this menu to also have a block that
                            shows the longer description for each item.'),
      '#default_value' => variable_get('menu_descriptions_' . $form['menu_name']['#default_value'], FALSE),
    );
    $form['submit']['#weight'] = 9;
    $form['delete']['#weight'] = 10;
    $form['#submit'][] = '_menu_descriptions_menu_form_submit';
  }

  if ($form_id == 'menu_edit_item') {
    $options = db_query('SELECT * FROM {menu_descriptions} WHERE mlid = :mlid',
            array(':mlid' => $form['mlid']['#value'],))->fetchAssoc();

    $form['#menu_descriptions_old_options'] = $options;
    $form['menu_descriptions'] = array(
      '#type' => 'text_format',
      '#title' => t('Longer description'),
      '#default_value' => ( isset($options['description']) ? $options['description'] : '' ),
      '#format' => ( isset($options['format']) ? $options['format'] : NULL ),
      '#description' => t('The longer description you would like shown for this menu item.'),
    );
    $form['#submit'][] = '_menu_descriptions_item_form_submit';
  }
}


/**
 * Process the submitted menu form
 */
function _menu_descriptions_menu_form_submit($form, &$form_state) {

  variable_set('menu_descriptions_' . $form_state['values']['menu_name'], $form_state['values']['menu_descriptions_enable']);

}


/**
 * Process the submitted form
 */
function _menu_descriptions_item_form_submit($form, &$form_state) {

  if ( $form['#menu_descriptions_old_options'] ) {
    if ( $form['#menu_descriptions_old_options']['description'] != $form_state['values']['menu_descriptions']['value'] ||
           $form['#menu_descriptions_old_options']['format'] != $form_state['values']['menu_descriptions']['format'] ) {
      db_update('menu_descriptions')
          ->fields(array(
            'description' => $form_state['values']['menu_descriptions']['value'],
            'format' => $form_state['values']['menu_descriptions']['format']
            ))
          ->condition('mlid', $form_state['values']['mlid'], '=')
          ->execute();
    }
  }
  else {
    db_insert('menu_descriptions')
          ->fields(array(
            'mlid' => $form_state['values']['mlid'],
            'description' => $form_state['values']['menu_descriptions']['value'],
            'format' => $form_state['values']['menu_descriptions']['format']
          ))
          ->execute();
  }

}


/**
 * Implements hook_block_info
 */
function menu_descriptions_block_info() {
  $enabled_menus = _menu_descriptions_get_enabled_menus();
  $blocks = array();
  foreach ( $enabled_menus as $name => $title ) {
    $blocks[$name]['info']  = $title .' - Long descriptions';
    $blocks[$name]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function menu_descriptions_block_view($delta = '') {
  $enabled_menus = _menu_descriptions_get_enabled_menus();
  global $user;
  $block = array();
  if ( isset($enabled_menus[$delta]) ) {
    $menutree = _menu_descriptions_menu_tree($delta);
    if ( !empty($menutree) ) {
      if ( user_access('administer menu') || module_exists('delegate_menu_admin') &&
              user_access('administer some menus') && function_exists('delegate_menu_admin_check_user_admin') &&
              delegate_menu_admin_check_user_admin(NULL, $delta) ) {
        $edit_links = '<div class="menu-edit-link">' .
                l('[' . t('Edit menu') . ']', "admin/structure/menu/manage/$delta",
                        array('attributes' => array('class' => array('edit-block-menu',), 'title' => t('Edit menu'),),)) .
                '</div>';
      }
      else {
        $edit_links = '';
      }
      $block['subject'] = ( $delta == 'navigation' && !empty($user->uid) ? theme('username', $user) : $enabled_menus[$delta] );
      $block['content'] = $edit_links . theme('menu_descriptions_menu', array('menu_name' => $delta, 'menu_tree' => $menutree,));
    }
  }
  return $block;
}


/**
 * Get a list of all menus that have been set to generate a menu block with long descriptions.
 * @return array Associative array of menu_name -> menu_title
 */
function _menu_descriptions_get_enabled_menus() {
  $result = db_query('SELECT menu_name, title FROM {menu_custom}');
  $enabled_menus = array();
  while ($menu = $result->fetchObject()) {
    if ( variable_get('menu_descriptions_' . $menu->menu_name, FALSE) ) {
      $enabled_menus[$menu->menu_name] = $menu->title;
    }
  }
  return $enabled_menus;
}


/**
 * Build a menu tree with descriptions.
 * @param string $menu_name The name of the menu to build.
 * @return array The menu tree in an array.
 */
function _menu_descriptions_menu_tree($menu_name) {
  $menutree = menu_tree_all_data($menu_name, NULL, 1);
  if ( !empty($menutree) ) {
    $menu_descriptions = db_query("SELECT md.* FROM {menu_links} ml JOIN {menu_descriptions} md ON ml.mlid = md.mlid WHERE ml.menu_name = :menu_name",
            array(':menu_name' => $menu_name,))->fetchAllAssoc('mlid');
    foreach ($menutree as &$data ) {
      $data['menu_descriptions'] = ( isset($menu_descriptions[$data['link']['mlid']]) ? $menu_descriptions[$data['link']['mlid']] : NULL );
    }
  }
  return $menutree;
}


/**
 * Implements hook_theme().
 */
function menu_descriptions_theme($existing, $type, $theme, $path) {
  return array(
    'menu_descriptions_menu' => array(
      'variables' => array('menu_name' => NULL, 'menu_tree' => array(),),
    ),
    'menu_descriptions_menu_wrapper' => array(
      'variables' => array('menu' => NULL,),
      'template' => 'menu-descriptions-menu-wrapper',
    ),
    'menu_descriptions_menu_item' => array(
      'variables' => array(
        'menu_name' => NULL,
        'link' => NULL,
        'title' => NULL,
        'href' => NULL,
        'description' => NULL,
        'class' => '',
        'class_array' => array(),
        'items' => array(),
        'delta' => NULL,
      ),
      'template' => 'menu-descriptions-menu-item',
    ),
  );
}


/**
 * Theme the menu tree.
 *
 * @param array $variables Contains the menu tree to be processed.
 * @return string The rendered HTML for the menu with descriptions.
 */
function theme_menu_descriptions_menu($variables) {

  $output = '';
  $items = array();

  // Pull out just the menu items we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ( $variables['menu_tree'] as $data ) {
    if ( $data['link']['access'] && !$data['link']['hidden'] ) {
      $items[] = $data;
    }
  }

  $num_items = count($items);
  foreach ( $items as $i => $data ) {
    $options = empty($data['link']['localized_options']) ? array() : $data['link']['localized_options'];
    if ( $i == 0 ) {
      $options['attributes']['class'][] = 'first';
    }
    if ( $i == $num_items - 1 ) {
      $options['attributes']['class'][] = 'last';
    }
    $options['attributes']['class'][] = ( $i % 2 == 0 ? 'odd' : 'even' );
    $options['attributes']['class'][] = 'menu-item';
    $options['attributes']['class'][] = 'menu-item-' . ( $i + 1 );
    $class = $options['attributes']['class'];
    $options['attributes']['class'][] = 'menu-item-link';
    $link = l($data['link']['title'], $data['link']['href'], $options);
    if ( isset($data['menu_descriptions']) ) {
      $description = check_markup($data['menu_descriptions']->description, $data['menu_descriptions']->format, FALSE);
    }
    else {
      $description = '';
    }
    $output .= theme('menu_descriptions_menu_item', array(
      'menu_name' => $variables['menu_name'],
      'link' => $link,
      'title' => strip_tags($data['link']['title']),
      'href' => $data['link']['href'],
      'description' => $description,
      'class' => implode(' ', $class),
      'class_array' => $class,
      'items' => $items,
      'delta' => $i,
    ));
  }

  return theme('menu_descriptions_menu_wrapper', array('menu' => $output,));

}

